{"version":3,"sources":["tools/history.js","screen/Container.js","components/SubComponent.js","screen/Extend/Extend_art4.js","../node_modules/react-router-dom/es/Link.js"],"names":["hashHistory","createHashHistory","require","Container","Component","react_default","a","createElement","nav_bar_default","mode","icon","window","location","hash","icon_default","type","onLeftClick","history","go","this","props","children","BlockComponent","_React$Component","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","React","_createClass","key","value","_this$props","route","title","containerStyle","titleStyle","react__WEBPACK_IMPORTED_MODULE_0___default","className","style","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","to","Title","_React$Component2","fontSize","textAlign","lineHeight","marginTop","Label","_React$Component3","Paragraph","_React$Component4","_objectSpread","textIndent","margin","CodeBlock","_React$Component5","content","Extend_art4","_screen_Container__WEBPACK_IMPORTED_MODULE_1__","padding","_components_SubComponent__WEBPACK_IMPORTED_MODULE_2__","react_router_dom__WEBPACK_IMPORTED_MODULE_3__","react__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","invariant__WEBPACK_IMPORTED_MODULE_2__","invariant__WEBPACK_IMPORTED_MODULE_2___default","history__WEBPACK_IMPORTED_MODULE_3__","_extends","Object","assign","target","i","length","source","prototype","hasOwnProperty","call","self","ReferenceError","isModifiedEvent","event","metaKey","altKey","ctrlKey","shiftKey","Link","_temp","_this","instance","Constructor","TypeError","_len","args","Array","_key","concat","handleClick","onClick","defaultPrevented","button","preventDefault","context","router","replace","push","subClass","superClass","create","constructor","enumerable","writable","configurable","setPrototypeOf","__proto__","render","_props","innerRef","obj","keys","indexOf","_objectWithoutProperties","undefined","href","createHref","ref","propTypes","func","string","bool","oneOfType","object","isRequired","defaultProps","contextTypes","shape","__webpack_exports__"],"mappings":"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","file":"static/js/33.2b299ae3.chunk.js","sourcesContent":["let createHashHistory = require(\"history\").createHashHistory;\nlet hashHistory = createHashHistory();\nexport default hashHistory;","import React, { Component } from 'react';\nimport { NavBar, Icon } from 'antd-mobile';\nimport history from '@/tools/history';\n\nclass Container extends Component {\n\n    render() {\n        return (\n            <div>\n                <NavBar\n                mode=\"light\"\n                icon={window.location.hash === '#/Home' ? '' : <Icon type=\"left\" />}\n                onLeftClick={window.location.hash === '#/Home' ? () => {} : () => {history.go(-1)}}\n                >前端笔记</NavBar>\n            {this.props.children}\n            </div>\n        )\n    }\n}\n\nexport default Container;","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport '@/assets/style/components.less';\n\nexport class BlockComponent extends React.Component {\n    render() {\n        let { route, title, containerStyle, titleStyle } = this.props;\n        return (\n            <div className={'blockComponent'} style={containerStyle}>\n                <Link to={route}>\n                    <p style={titleStyle}>{title}</p>\n                </Link>\n            </div>\n        )\n    }\n}\n\nexport class Title extends React.Component {\n    render() {\n        return (\n            <h3 style={{fontSize: '24px', textAlign: 'center', lineHeight: '36px', marginTop: '10px'}}>{this.props.title}</h3>\n        )\n    }\n}\n\nexport class Label extends React.Component {\n    render() {\n        return(\n            <div className={'label'}>\n                <p>{this.props.title} <i className={'Lborder'}></i></p>\n            </div>\n        )\n    }\n}\n\nexport class Paragraph extends React.Component {\n    render() {\n        return(\n            <section className='paragraph' style={{textIndent: '2em', margin: '10px 0', lineHeight: '26px', ...this.props.style}}>{this.props.title}</section>\n        )\n    }\n}\n\nexport class CodeBlock extends React.Component {\n    render() {\n        return(\n            <div className={'highlight'}>\n                <pre>\n                    {this.props.content}\n                </pre>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport Container from '@/screen/Container';\nimport { Title, Label, Paragraph, CodeBlock } from '@/components/SubComponent';\nimport { Link } from 'react-router-dom';\n\nclass Extend_art4 extends React.Component {\n    render() {\n        return(\n            <Container>\n                <div style={{padding: '0 10px'}}>\n                    <Title title={'javascript面向对象系列第三篇——实现继承的3种形式'} />\n                    <Paragraph title={<p>学习如何<Link to={'Extend_art3'}>创建对象</Link>是理解面向对象编程的第一步，第二步是理解继承。开宗明义，继承是指在原有对象的基础上，略作修改，得到一个新的对象。javascript主要包括类式继承、原型继承和拷贝继承这三种继承方式。本文是javascript面向对象系列第三篇——实现继承的3种形式</p>} />\n                    <Label title={'类式继承'} />\n                    <Paragraph title={'大多数面向对象的编程语言都支持类和类继承的特性，而JS却不支持这些特性，只能通过其他方法定义并关联多个相似的对象，如new和instanceof。不过在后来的ES6中新增了一些元素，比如class关键字，但这并不意味着javascript中是有类的，class只是构造函数的语法糖而已'} />\n                    <Paragraph title={'类式继承的主要思路是，通过构造函数实例化对象，通过原型链将实例对象关联起来。下面将对类式继承进行详细解释'} />\n                    <Paragraph style={{textIndent: 0}} title={'【原型链继承】'} />\n                    <Paragraph title={'javascript使用原型链作为实现继承的主要方法，实现的本质是重写原型对象，代之以一个新类型的实例。下面的代码中，原来存在于SuperType的实例对象中的属性和方法，现在也存在于SubType.prototype中了'} />\n<CodeBlock content={\n`function Super(){\n    this.value = true;\n}\nSuper.prototype.getValue = function(){\n    return this.value;\n};\nfunction Sub(){}\n//Sub继承了Super\nSub.prototype = new Super();\nSub.prototype.constructor = Sub;\n\nvar instance = new Sub();\nconsole.log(instance.getValue());//true\n`} />\n                    <Paragraph title={'原型链最主要的问题在于包含引用类型值的原型属性会被所有实例共享，而这也正是为什么要在构造函数中，而不是在原型对象中定义属性的原因。在通过原型来实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了'} />\n<CodeBlock content={\n`function Super(){\n    this.colors = ['red','blue','green'];\n}\nfunction Sub(){};\n//Sub继承了Super\nSub.prototype = new Super();\nvar instance1 = new Sub();\ninstance1.colors.push('black');\nconsole.log(instance1.colors);//'red,blue,green,black'\nvar instance2 = new Sub();\nconsole.log(instance2.colors);//'red,blue,green,black'\n`} />\n                    <Paragraph title={'原型链的第二个问题是，在创建子类型的实例时， 不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。再加上包含引用类型值的原型属性会被所有实例共享的问题，在实践中很少会单独使用原型链继承'} />\n                    <Paragraph style={{textIndent: 0}} title={'【借用构造函数继承】'} />\n                    <Paragraph title={<p>借用<Link to={'Extend_art2'}>构造函数</Link>(constructor stealing)的技术(有时候也叫做伪类继承或经典继承)。基本思想相当简单，即在子类型构造函数的内部调用超类型构造函数，通过使用apply()和call()方法在新创建的对象上执行构造函数</p>} />\n<CodeBlock content={\n`function Super(){\n    this.value = true;\n}\nSuper.prototype.getValue = function(){\n    return this.value;\n};\nfunction Sub(){}\n//Sub继承了Super\nSub.prototype = new Super();\nSub.prototype.constructor = Sub;\n\nvar instance = new Sub();\nconsole.log(instance.getValue());//true\n`} />\n                    <Paragraph title={'原型链最主要的问题在于包含引用类型值的原型属性会被所有实例共享，而这也正是为什么要在构造函数中，而不是在原型对象中定义属性的原因。在通过原型来实现继承时，原型实际上会变成另一个类型的实例。于是，原先的实例属性也就顺理成章地变成了现在的原型属性了'} />\n<CodeBlock content={\n`function Super(){\n    this.colors = ['red','blue','green'];\n}\nfunction Sub(){};\n//Sub继承了Super\nSub.prototype = new Super();\nvar instance1 = new Sub();\ninstance1.colors.push('black');\nconsole.log(instance1.colors);//'red,blue,green,black'\nvar instance2 = new Sub();\nconsole.log(instance2.colors);//'red,blue,green,black'\n`} />\n                    <Paragraph title={'原型链的第二个问题是，在创建子类型的实例时， 不能向超类型的构造函数中传递参数。实际上，应该说是没有办法在不影响所有对象实例的情况下，给超类型的构造函数传递参数。再加上包含引用类型值的原型属性会被所有实例共享的问题，在实践中很少会单独使用原型链继承'} />\n                    <Paragraph style={{textIndent: 0}} title={'【借用构造函数继承】'} />\n                    <Paragraph title={'借用构造函数(constructor stealing)的技术(有时候也叫做伪类继承或经典继承)。基本思想相当简单，即在子类型构造函数的内部调用超类型构造函数，通过使用apply()和call()方法在新创建的对象上执行构造函数'} />\n<CodeBlock content={\n`function Super(){\n    this.colors = ['red','blue','green'];\n}\nfunction Sub(){\n    //继承了Super\n    Super.call(this);\n}\nvar instance1 = new Sub();\ninstance1.colors.push('black');\nconsole.log(instance1.colors);// ['red','blue','green','black']\nvar instance2 = new Sub();\nconsole.log(instance2.colors);// ['red','blue','green']\n`} />\n                    <Paragraph title={'相对于原型链而言，借用构造函数有一个很大的优势，即可以在子类型构造函数中向超类型构造函数传递参数'} />\n<CodeBlock content={\n`function Super(name){\n    this.name = name;\n}\nfunction Sub(){\n    //继承了Super，同时还传递了参数\n    Super.call(this,\"bai\");\n    //实例属性\n    this.age = 29;\n}\nvar instance = new Sub();\nconsole.log(instance.name);//\"bai\"\nconsole.log(instance.age);//29 \n`} />\n                    <Paragraph title={'但是，如果仅仅是借用构造函数，那么也将无法避免构造函数模式存在的问题——方法都在构造函数中定义，因此函数复用就无从谈起了'} />\n                    <Paragraph style={{textIndent: 0}} title={'【组合继承】'} />\n                    <Paragraph title={'组合继承(combination inheritance)有时也叫伪经典继承，指的是将原型链和借用构造函数的技术组合到一块，从而发挥二者之长的一种继承模式。其背后的思路是使用原型链实现对原型属性和方法的继承，而通过借用构造函数来实现对实例属性的继承。这样，既通过在原型上定义方法实现了函数复用，又能够保证每个实例都有它自己的属性'} />\n<CodeBlock content={\n`function Super(name){\n    this.name = name;\n    this.colors = ['red','blue','green'];\n}\nSuper.prototype.sayName = function(){\n    console.log(this.name);\n};\nfunction Sub(name,age){\n    //继承属性\n    Super.call(this,name);\n    this.age = age;\n}\n//继承方法\nSub.prototype = new Super();\nSub.prototype.constructor = Sub;\nSub.prototype.sayAge = function(){\n    console.log(this.age);\n}\nvar instance1 = new Sub(\"bai\",29);\ninstance1.colors.push(\"black\");\nconsole.log(instance1.colors);//['red','blue','green','black']\ninstance1.sayName();//\"bai\"\ninstance1.sayAge();//29\n\nvar instance2 = new Sub(\"hu\",27);\nconsole.log(instance2.colors);//['red','blue','green']\ninstance2.sayName();//\"hu\"\ninstance2.sayAge();//27\n`} />\n                    <Paragraph title={'组合继承有它自己的问题。那就是无论什么情况下，都会调用两次父类型构造函数：一次是在创建子类型原型的时候，另一次是在子类型构造函数内部。子类型最终会包含父类型对象的全部实例属性，但不得不在调用子类型构造函数时重写这些属性'} />\n<CodeBlock content={\n`function Super(name){\n    this.name = name;\n    this.colors = [\"red\",\"blue\",\"green\"];\n}\nSuper.prototype.sayName = function(){\n    return this.name;\n};\nfunction Sub(name,age){\n        // 第二次调用Super()，Sub.prototype又得到了name和colors两个属性，并对上次得到的属性值进行了覆盖\n    Super.call(this,name);\n    this.age = age;\n}\n//第一次调用Super()，Sub.prototype得到了name和colors两个属性\nSub.prototype = new Super(); \nSub.prototype.constructor = Sub;\nSub.prototype.sayAge = function(){\n    return this.age;\n};  \n`} />\n                    <Paragraph style={{textIndent: 0}} title={'【寄生组合继承】'} />\n                    <Paragraph title={'解决两次调用的方法是使用寄生组合式继承。寄生组合式继承与组合继承相似，都是通过借用构造函数来继承不可共享的属性，通过原型链的混成形式来继承方法和可共享的属性。只不过把原型继承的形式变成了寄生式继承。使用寄生组合式继承可以不必为了指定子类型的原型而调用父类型的构造函数，从而寄生式继承只继承了父类型的原型属性，而父类型的实例属性是通过借用构造函数的方式来得到的'} />\n                    <Paragraph title={'注意:下方中会对寄生继承进行详细说明'} />\n<CodeBlock content={\n`function Super(name){\n    this.name = name;\n    this.colors = [\"red\",\"blue\",\"green\"];\n}\nSuper.prototype.sayName = function(){\n    return this.name;\n};\n\nfunction Sub(name,age){\n    Super.call(this,name);\n    this.age = age;\n}\nif(!Object.create){\n    Object.create = function(proto){\n　　　　function F(){};\n　　　　F.prototype = proto;\n　　　　return new F;\n　　}\n}\nSub.prototype = Object.create(Super.prototype);\nSub.prototype.constructor = Sub;\n\nvar instance1 = new Sub(\"bai\",29);\ninstance1.colors.push(\"black\");\nconsole.log(instance1.colors);//['red','blue','green','black']\ninstance1.sayName();//\"bai\"\n\nvar instance2 = new Sub(\"hu\",27);\nconsole.log(instance2.colors);//['red','blue','green']\ninstance2.sayName();//\"hu\"\n`} />\n                    <Paragraph title={'这个例子的高效率体现在它只调用了一次Super构造函数，并且因此避免了在Sub.prototype上面创建不必要的、多余的属性。与此同时，原型链还保持不变'} />\n                    <Paragraph title={'因此，开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式，YUI的YAHOO.lang.extend()方法就采用了这种继承模式'} />\n                    <Paragraph title={'【ES6中的class】'} />\n                    <Paragraph title={'如果使用ES6中的class语法，则上面代码修改如下'} />\n                    <Paragraph title={'注意:关于关于ES6中的class语法，详细情况移步至此'} />\n<CodeBlock content={\n`class Super {\n    constructor(name){\n        this.name = name;\n        this.colors = [\"red\",\"blue\",\"green\"];\n    }\n    sayName(){\n        return this.name;\n    }\n}\n\nclass Sub extends Super{\n    constructor(name,age){\n        super(name);\n        this.age = age;\n    }\n}\n\nvar instance1 = new Sub(\"bai\",29);\ninstance1.colors.push(\"black\");\nconsole.log(instance1.colors);//['red','blue','green','black']\ninstance1.sayName();//\"bai\"\n\nvar instance2 = new Sub(\"hu\",27);\nconsole.log(instance2.colors);//['red','blue','green']\ninstance2.sayName();//\"hu\"\n`} />\n                    <Paragraph title={'ES6的class语法糖隐藏了许多技术细节，在实现同样功能的前提下，代码却优雅不少'} />\n                    <Label title={'原型继承'} />\n                    <Paragraph style={{textIndent: 0}} title={'【原型继承】'} />\n                    <Paragraph title={'原型继承，在《你不知道的javascript》中被翻译为委托继承'} />\n                    <Paragraph title={'道格拉斯·克罗克福德(Douglas Crockford)在2006年写了一篇文章，《javascript中的原型式继承》。在这篇文章中，他介绍了一种实现继承的方式，这种方式并没有使用严格意义上的构造函数。他的想法是借助原型可以基于已有的对象来创建新对象，同时不必因此创建自定义类型'} />\n                    <Paragraph title={'原型继承的基础函数如下所示'} />\n<CodeBlock content={\n`function object(o){\n    function F(){};\n    F.prototype = o;\n    return new F();\n}\n`} />\n                    <Paragraph title={'在object()函数内部，先创建了一个临时性的构造函数，然后将传入的对象作为这个构造函数的原型，最后返回了这个临时类型的一个新实例。从本质上讲，object()对传入其中的对象执行了一次浅复制'} />\n                    <Paragraph title={'下面是一个例子'} />\n<CodeBlock content={\n`var superObj = {\n    init: function(value){\n        this.value = value;\n    },\n    getValue: function(){\n        return this.value;\n    }\n}\n\nvar subObj = object(superObj);\nsubObj.init('sub');\nconsole.log(subObj.getValue());//'sub'\n`} />\n                    <Paragraph title={'ES5通过新增Object.create()方法规范化了原型式继承'} />\n                    <Paragraph title={'注意:关于Object.create()方法的详细内容移步至此'} />\n<CodeBlock content={\n`var superObj = {\n    init: function(value){\n        this.value = value;\n    },\n    getValue: function(){\n        return this.value;\n    }\n}\n\nvar subObj = Object.create(superObj);\nsubObj.init('sub');\nconsole.log(subObj.getValue());//'sub'\n`} />\n                    <Paragraph style={{textIndent: 0}} title={'【与原型链继承的关系】'} />\n                    <Paragraph title={'原型继承虽然只是看上去将原型链继承的一些程序性步骤包裹在函数里而已。但是，它们的一个重要区别是父类型的实例对象不再作为子类型的原型对象'} />\n                    <Paragraph title={'1、使用原型链继承'} />\n<CodeBlock content={\n`function Super(){\n    this.value = 1;\n}\nSuper.prototype.value = 0;\nfunction Sub(){};\n//将父类型的实例对象作为子类型的原型对象\nSub.prototype = new Super();\nSub.prototype.constructor = Sub;\n\n//创建子类型的实例对象\nvar instance = new Sub;\nconsole.log(instance.value);//1\n`} />\n                    <Paragraph title={'2、使用原型继承'} />\n<CodeBlock content={\n`function Super(){\n    this.value = 1;\n}\nSuper.prototype.value = 0;\nfunction Sub(){};\n\nSub.prototype = Object.create(Super.prototype);\nSub.prototype.constructor = Sub;\n\n//创建子类型的实例对象\nvar instance = new Sub;\nconsole.log(instance.value);//0\n`} />\n                    <Paragraph title={'上面的Object.create函数一行代码Sub.prototype = Object.create(Super.prototype)可以分解为'} />\n<CodeBlock content={\n`function F(){};\nF.prototype = Super.prototype;\nSub.prototype = new F();\n`} />\n                    <Paragraph title={'由上面代码看出，子类的原型对象是临时类F的实例对象，而临时类F的原型对象又指向父类的原型对象；所以，实际上，子类可以继承父类的原型上的属性，但不可以继承父类的实例上的属性'} />\n                    <Paragraph title={'原型继承与原型链继承都存在着子例共享父例引用类型值的问题'} />\n<CodeBlock content={\n`var superObj = {\n    colors: ['red','blue','green']\n};\nvar subObj1 = object(superObj);\nsubObj1.colors.push(\"black\");\n\nvar subObj2 = object(superObj);\nsubObj2.colors.push(\"white\");\n\nconsole.log(superObj.colors);//[\"red\", \"blue\", \"green\", \"black\", \"white\"]\nconsole.log(subObj1.colors);//[\"red\", \"blue\", \"green\", \"black\", \"white\"]\n`} />\n                    <Paragraph style={{textIndent: 0}} title={'【寄生式继承】'} />\n                    <Paragraph title={'寄生式继承(parasitic)是与原型继承紧密相关的一种思路，并且同样是由道格拉斯·克罗克福德推而广之的。寄生式继承的思路与寄生构造函数和工厂模式类似，即创建一个仅用于封装继承过程的函数，该函数内部以某种方式来增强对象，最后再返回对象'} />\n<CodeBlock content={\n`function parasite(original){\n    var clone = Object.create(original);//通过调用函数创建一个新对象\n    clone.sayHi = function(){ //以某种方式来增强这个对象\n        console.log(\"hi\");\n    };\n    return clone;//返回这个对象\n}\nvar superObj = {\n    colors: ['red','blue','green']\n};\nvar subObj1 = parasite(superObj);\nsubObj1.colors.push('black');\nvar subObj2 = parasite(superObj);\nsubObj2.colors.push('white');\n\nconsole.log(superObj.colors);//[\"red\", \"blue\", \"green\", \"black\", \"white\"]\nconsole.log(subObj1.colors);//[\"red\", \"blue\", \"green\", \"black\", \"white\"]\n`} />\n                    <Paragraph title={'由于原型继承存在着引用类型的值被共享的问题，所以使用得并不很多，只在一些简单应用场景下使用。如果需要解决该问题，则需要借用构造函数，与原型继承的初衷相违背，相当于使用了类式继承的终极写法——寄生组合继承'} />\n                    <Label title={'拷贝继承'} />\n                    <Paragraph title={'拷贝继承在《javascript面向对象摘要》中翻译为混入继承，jQuery使用的就是拷贝继承'} />\n                    <Paragraph title={'拷贝继承不需要改变原型链，通过拷贝函数将父例的属性和方法拷贝到子例即可'} />\n                    <Paragraph title={'注意:关于对象拷贝的详细信息移步至此'} />\n                    <Paragraph style={{textIndent: 0}} title={'【拷贝函数】'} />\n                    <Paragraph title={'下面是一个深拷贝的拷贝函数'} />\n<CodeBlock content={\n`function extend(obj,cloneObj){\n    if(typeof obj != 'object'){\n        return false;\n    }\n    var cloneObj = cloneObj || {};\n    for(var i in obj){\n        if(typeof obj[i] === 'object'){\n            cloneObj[i] = (obj[i] instanceof Array) ? [] : {};\n            arguments.callee(obj[i],cloneObj[i]);\n        }else{\n            cloneObj[i] = obj[i]; \n        }  \n    }\n    return cloneObj;\n}\n\nvar obj1={a:1,b:2,c:[1,2,3]};\nvar obj2=extend(obj1);\nconsole.log(obj1.c); //[1,2,3]\nconsole.log(obj2.c); //[1,2,3]\nobj2.c.push(4);\nconsole.log(obj2.c); //[1,2,3,4]\nconsole.log(obj1.c); //[1,2,3]\n`} />\n                    <Paragraph style={{textIndent: 0}} title={'【对象间的拷贝继承】'} />\n                    <Paragraph title={'由于拷贝继承解决了引用类型值共享的问题，所以其完全可以脱离构造函数实现对象间的继承'} />\n<CodeBlock content={\n`function extend(obj,cloneObj){\n    if(typeof obj != 'object'){\n        return false;\n    }\n    var cloneObj = cloneObj || {};\n    for(var i in obj){\n        if(typeof obj[i] === 'object'){\n            cloneObj[i] = (obj[i] instanceof Array) ? [] : {};\n            arguments.callee(obj[i],cloneObj[i]);\n        }else{\n            cloneObj[i] = obj[i]; \n        }  \n    }\n    return cloneObj;\n}\n\nvar superObj = {\n  arrayValue:[1,2,3],\n  init: function(value){\n    this.value = value;\n  },\n  getValue: function(){\n    return this.value;\n  }\n}\nvar subObj = extend(superObj);\nsubObj.arrayValue.push(4);\nconsole.log(subObj.arrayValue);//[1,2,3,4]\nconsole.log(superObj.arrayValue);//[1,2,3]\n`} />\n                    <Paragraph style={{textIndent: 0}} title={'【使用构造函数的拷贝组合继承】'} />\n                    <Paragraph title={'如果要使用构造函数，则属性可以使用借用构造函数的方法，而引用类型属性和方法使用拷贝继承。相当于不再通过原型链来建立对象之间的联系，而通过复制来得到对象的属性和方法'} />\n<CodeBlock content={\n`function extend(obj,cloneObj){\n    if(typeof obj != 'object'){\n        return false;\n    }\n    var cloneObj = cloneObj || {};\n    for(var i in obj){\n        if(typeof obj[i] === 'object'){\n            cloneObj[i] = (obj[i] instanceof Array) ? [] : {};\n            arguments.callee(obj[i],cloneObj[i]);\n        }else{\n            cloneObj[i] = obj[i]; \n        }  \n    }\n    return cloneObj;\n}\nfunction Super(name){\n    this.name = name;\n    this.colors = [\"red\",\"blue\",\"green\"];\n}\nSuper.prototype.sayName = function(){\n    return this.name;\n};\nfunction Sub(name,age){\n    Super.call(this,name);\n    this.age = age;\n}\nSub.prototype = extend(Super.prototype);\nvar instance1 = new Sub(\"bai\",29);\ninstance1.colors.push(\"black\");\nconsole.log(instance1.colors);//['red','blue','green','black']\ninstance1.sayName();//\"bai\"\n\nvar instance2 = new Sub(\"hu\",27);\nconsole.log(instance2.colors);//['red','blue','green']\ninstance2.sayName();//\"hu\"\n`} />\n                    <Label title={'总结'} />\n                    <Paragraph title={'本文介绍的类式继承、原型继承和拷贝继承这三种继承方式中，类式继承用的最普遍，由于ES6中的class的语法糖，使其代码复杂度大大降低；原型继承由于无法处理引用类型值共享的问题，使用较少，但由原型继承引申出的寄生组合继承是类式继承的范式方法；拷贝继承使用范围最广泛，不仅可以实现原型之间的继承，也可以脱离构造函数，直接实现对象间的继承'} />\n                    <Paragraph title={'总之，继承主要就是处理父例和子例之间的两个问题，即是否使用构造函数，及如何建立联系'} />\n                    <Paragraph title={'类式继承的核心就是使用构造函数，通过原型链来建立联系'} />\n                    <Paragraph title={'原型继承不使用构造函数，通过Object.create()来建立联系'} />\n                    <Paragraph title={'拷贝继承使不使用构造函数都可以，通过复制来建立联系'} />\n                </div>\n            </Container>\n        )\n    }\n}\n\nexport default Extend_art4;","var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport invariant from \"invariant\";\nimport { createLocation } from \"history\";\n\nvar isModifiedEvent = function isModifiedEvent(event) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n};\n/**\n * The public API for rendering a history-aware <a>.\n */\n\n\nvar Link = function (_React$Component) {\n  _inherits(Link, _React$Component);\n\n  function Link() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Link);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {\n      if (_this.props.onClick) _this.props.onClick(event);\n\n      if (!event.defaultPrevented && // onClick prevented default\n      event.button === 0 && // ignore everything but left clicks\n      !_this.props.target && // let browser handle \"target=_blank\" etc.\n      !isModifiedEvent(event) // ignore clicks with modifier keys\n      ) {\n          event.preventDefault();\n          var history = _this.context.router.history;\n          var _this$props = _this.props,\n              replace = _this$props.replace,\n              to = _this$props.to;\n\n          if (replace) {\n            history.replace(to);\n          } else {\n            history.push(to);\n          }\n        }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Link.prototype.render = function render() {\n    var _props = this.props,\n        replace = _props.replace,\n        to = _props.to,\n        innerRef = _props.innerRef,\n        props = _objectWithoutProperties(_props, [\"replace\", \"to\", \"innerRef\"]); // eslint-disable-line no-unused-vars\n\n\n    invariant(this.context.router, \"You should not use <Link> outside a <Router>\");\n    invariant(to !== undefined, 'You must specify the \"to\" property');\n    var history = this.context.router.history;\n    var location = typeof to === \"string\" ? createLocation(to, null, null, history.location) : to;\n    var href = history.createHref(location);\n    return React.createElement(\"a\", _extends({}, props, {\n      onClick: this.handleClick,\n      href: href,\n      ref: innerRef\n    }));\n  };\n\n  return Link;\n}(React.Component);\n\nLink.propTypes = {\n  onClick: PropTypes.func,\n  target: PropTypes.string,\n  replace: PropTypes.bool,\n  to: PropTypes.oneOfType([PropTypes.string, PropTypes.object]).isRequired,\n  innerRef: PropTypes.oneOfType([PropTypes.string, PropTypes.func])\n};\nLink.defaultProps = {\n  replace: false\n};\nLink.contextTypes = {\n  router: PropTypes.shape({\n    history: PropTypes.shape({\n      push: PropTypes.func.isRequired,\n      replace: PropTypes.func.isRequired,\n      createHref: PropTypes.func.isRequired\n    }).isRequired\n  }).isRequired\n};\nexport default Link;"],"sourceRoot":""}